// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee?
  articles Article[]
  comments Comment[]

  @@map("users")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts     Post[]
  employees Employee[]

  @@map("departments")
}

model Post {
  id           String   @id @default(cuid())
  title        String
  description  String?
  requirements     String?
  responsibilities String?
  salaryRange      String?
  employmentType   EmploymentType @default(FULL_TIME)
  departmentId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employees  Employee[]

  @@map("posts")
}

model Employee {
  id           String    @id @default(cuid())
  userId       String    @unique
  employeeId   String    @unique
  firstName    String
  lastName     String
  phone        String?
  address      String?
  dateOfJoining DateTime
  departmentId String
  postId       String
  managerId    String?
  customRoleId String?
  customRole   CustomRole? @relation(fields: [customRoleId], references: [id])
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  department   Department     @relation(fields: [departmentId], references: [id])
  post         Post           @relation(fields: [postId], references: [id])
  manager      Employee?      @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates Employee[]     @relation("EmployeeManager")
  leaveRequests LeaveRequest[]
  leaveBalances LeaveBalance[]

  @@map("employees")
}

model LeaveType {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  maxDaysPerYear    Int
  carryForward      Boolean  @default(false)
  maxCarryForward   Int?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  leaveRequests LeaveRequest[]
  leaveBalances LeaveBalance[]

  @@map("leave_types")
}

model LeaveRequest {
  id           String      @id @default(cuid())
  employeeId   String
  leaveTypeId  String
  startDate    DateTime
  endDate      DateTime
  totalDays    Int
  reason       String
  status       LeaveStatus @default(PENDING)
  approvedBy   String?
  approvedAt   DateTime?
  rejectedBy   String?
  rejectedAt   DateTime?
  comments     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  employee  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType LeaveType @relation(fields: [leaveTypeId], references: [id])

  @@map("leave_requests")
}

model LeaveBalance {
  id           String   @id @default(cuid())
  employeeId   String
  leaveTypeId  String
  year         Int
  allocated    Int
  used         Int      @default(0)
  carriedOver  Int      @default(0)
  remaining    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  employee  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType LeaveType @relation(fields: [leaveTypeId], references: [id])

  @@unique([employeeId, leaveTypeId, year])
  @@map("leave_balances")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  authorId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("articles")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  articleId String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model CustomRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     // Store permissions as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employees Employee[]

  @@map("custom_roles")
}
